Index: War.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Iterator;\nimport java.util.Vector;\nimport java.util.Comparator;\n\npublic class War {\n    User initialChallenger;\n    User initialOpponent;\n    User challenger;\n    User opponent;\n    Vector<Character> challengerArmy;\n    Vector<Character> opponentArmy;\n\n    Vector<Character> challengerArmyAttackingArray;\n    Vector<Character> opponentArmyAttackingArray;\n    Vector<Character> challengerArmyDefendingArray;\n    Vector<Character> opponentArmyDefendingArray;\n    Vector<Character> opponentArmyHealingArray = opponentArmy;\n    Vector<Character> challengerArmyHealingArray=challengerArmy;\n\n    public War(User initialChallenger,User initialOpponent){\n        this.initialChallenger = initialChallenger;\n        this.initialOpponent = initialOpponent;\n        this.startWar();\n    }\n\n    private void initialingArrays(Vector<Character> challengerArmy, Vector<Character> opponentArmy){\n        this.challengerArmyAttackingArray = attackAriorityCheck(challengerArmy);\n        this.opponentArmyAttackingArray = attackAriorityCheck(opponentArmy);\n        this.challengerArmyDefendingArray = defencePriorityCheck(challengerArmy);\n        this.opponentArmyDefendingArray = defencePriorityCheck(opponentArmy);\n\n        this.opponentArmyHealingArray = opponentArmy;\n        this.challengerArmyHealingArray = challengerArmy;\n        this.opponentArmyHealingArray.sort(Comparator.comparingDouble(Character::getHealth));//ascending order\n        this.challengerArmyHealingArray.sort(Comparator.comparingDouble(Character::getHealth));//ascending order\n\n    }\n\n    public Vector<Character> attackAriorityCheck(Vector<Character> list){\n        list.sort(Comparator.comparingDouble(Character::getSpeed)\n                .thenComparing(character -> {\n                    if (character instanceof Healer) return 1;\n                    else if (character instanceof Mage) return 2;\n                    else if (character instanceof MythicalCreature) return 3;\n                    else if (character instanceof Knight) return 4;\n                    else return 5; // Archer\n                }).reversed());\n        return list;\n    }\n\n    public Vector<Character> defencePriorityCheck(Vector<Character> list){\n        list.sort(Comparator.comparingDouble(Character::getDefence)\n                .thenComparing(character -> {\n                    if (character instanceof Mage) return 1;\n                    else if (character instanceof Knight) return 2;\n                    else if (character instanceof Archer) return 3;\n                    else if (character instanceof MythicalCreature) return 4;\n                    else return 5; // Healer\n                }));\n        return list;\n    }\n\n    void startWar(){\n        this.challenger = initialChallenger;\n        this.opponent = initialOpponent;\n        this.challengerArmy = new Vector<>(challenger.getArmy());\n        this.opponentArmy = new Vector<>(opponent.getArmy());\n        for(Character character:challengerArmy){\n            switch (opponent.getHomeGround()) {\n                case \"HillCrest\" -> {\n                    if (character.getCharacterType().equals(\"HighLander\")) {\n                        character.setAttack(character.getAttack() + 1);\n                        character.setDefence(character.getDefence() + 1);\n                    }\n                }\n                case \"MarshLand\" -> {\n                    if (character.getCharacterType().equals(\"MarshLander\")) {\n                        character.setDefence(character.getDefence() + 2);\n                    }\n                    if (character.getCharacterType().equals(\"SunChild\")) {\n                        character.setAttack(character.getAttack() - 1);\n                    }\n                    if (character.getCharacterType().equals(\"Mystics\")) {\n                        character.setSpeed(character.getSpeed() - 1);\n                    }\n                }\n                case \"Desert\" -> {\n                    if (character.getCharacterType().equals(\"MarshLander\")) {\n                        character.setHealth(character.getHealth() - 1);\n                    }\n                    if (character.getCharacterType().equals(\"SunChild\")) {\n                        character.setAttack(character.getAttack() + 1);\n                    }\n                }\n                case \"Arcane\" -> {\n                    if (character.getCharacterType().equals(\"Mystics\")) {\n                        character.setAttack(character.getAttack() + 2);\n                    }\n                    if (character.getCharacterType().equals(\"HighLander\")) {\n                        character.setSpeed(character.getSpeed() - 1);\n                        character.setDefence(character.getDefence() - 1);\n                    }\n                    if (character.getCharacterType().equals(\"MarshLander\")) {\n                        character.setSpeed(character.getSpeed() - 1);\n                        character.setDefence(character.getDefence() - 1);\n                    }\n                }\n            }\n        }\n        initialingArrays(challengerArmy, opponentArmy);\n\n\n        for (Character character: challengerArmyHealingArray){\n            if (character instanceof Healer) {\n                opponentArmyHealingArray.remove(character);\n            }\n        }\n\n        for (Character character: challengerArmyHealingArray){\n            if (character instanceof Healer){\n                challengerArmyHealingArray.remove(character);\n            }\n        }\n\n        boolean attackingSide = false; //set to 0 when challenger is attacking and set to 1 when opponent is attacking\n        int turn = 1;\n        double previousHealth = opponentArmyDefendingArray.get(0).getHealth();\n        int i=0;\n        while (true) {\n            System.out.println(\"Round no = \"+turn);\n            if(!attackingSide){\n                System.out.print(\"Attacking Player = \" + initialChallenger.getUserName() + \" \" + \"Diffending Player = \" + initialOpponent.getUserName());\n            }\n            else{\n                System.out.print(\"Attacking player = \" + initialOpponent.getUserName() + \" \" + \"Diffending Player = \" + initialChallenger.getUserName());\n            }\n            //initially first attacking side is challenger\n            if (!attackingSide) {\n\n                //check the challenger attacking army character is a healer?\n                if(!(challengerArmyAttackingArray.getFirst() instanceof Healer)) {\n\n                    //get the damge value of challenger army attacking array\n                    double damage = 0.5 * (challengerArmyAttackingArray.get(i).getAttack()) - 0.1 * (opponentArmyDefendingArray.get(0).getDefence());\n\n                    //reduce the health of defending array army charactrer according to the damage value\n                    opponentArmyDefendingArray.get(i).setHealth(opponentArmyDefendingArray.get(0).getHealth() - damage);\n                    System.out.println(opponentArmyDefendingArray.get(0).getName()+\"'s health reduce by \"+damage+\" by the attack of \"+challengerArmyAttackingArray.get(i).getName());\n\n                    if(initialChallenger.getHomeGround().equals(\"Hillcrest\") && challengerArmyAttackingArray.get(i).getCharacterType().equals(\"Highlander\")){\n                        //get the damge value of challenger army attacking array\n                        double bonusDamage = 0.5 * (challengerArmyAttackingArray.get(i).getAttack()*0.2) - 0.1 * (opponentArmyDefendingArray.get(0).getDefence());\n                        //reduce the health of defending array army charactrer according to the damage value\n                        opponentArmyDefendingArray.get(0).setHealth(opponentArmyDefendingArray.get(0).getHealth() - bonusDamage);\n                    }\n                    if(turn != 1){\n                        if(initialChallenger.getHomeGround().equals(\"Arcane\") && opponentArmyDefendingArray.get(0).getCharacterType().equals(\"Mystics\")){\n                            opponentArmyDefendingArray.get(0).setHealth(previousHealth*1.1);\n                        }\n                    }\n                    //check the opponentdifendingaramkycharacter is die or not\n                    if(opponentArmyDefendingArray.get(0).getHealth() <= 0){\n                        //if died print\n                        System.out.println(opponentArmyDefendingArray.get(0).getName()+\" Died!\");\n                        //get the name of died character\n                        String diedCharacter = opponentArmyDefendingArray.get(0).getName();\n                        //remove the died character from opponentArmyDiffendingArray\n                        opponentArmyDefendingArray.remove(0);\n                        //search and remove the died charactor from opponentArmyAttacking Array\n                        for (Character character: opponentArmyHealingArray){\n                            if (character.getName().equals(diedCharacter)){\n                                opponentArmyHealingArray.remove(character);\n                                opponentArmyDefendingArray.remove(character);\n                            }\n                        }\n                    }\n                }\n                else{\n                    //sort the challengerarmyhealingarray according to current hea,th values\n                    challengerArmyHealingArray.sort(Comparator.comparingDouble(Character::getHealth));;\n                    //calculate the healvalue of the healer\n                    double healvalue = 0.1*(challengerArmyAttackingArray.get(i).getAttack());\n                    //get the lowest health character and heal it\n                    challengerArmyHealingArray.get(0).setHealth(challengerArmyHealingArray.get(0).getHealth() + healvalue);\n\n                    System.out.println(\"Healer is healed \"+challengerArmyHealingArray.get(0).getHealth()+\" by \" + healvalue);\n                    //save the healed charactor into a varibale\n                    Character healedchar = challengerArmyHealingArray.get(0);\n                    //also update the health value on opponentArmyDiffenderArray the lowest health charactor health\n                    for (Character character : opponentArmyDefendingArray) {\n                        if(character.getName().equals(healedchar.getName())){\n                            character.setHealth(character.getHealth()+healvalue);\n                        }\n                    }\n                }\n                attackingSide = true;\n            }\n            else{\n                //opponent attacking turn\n                if(!(opponentArmyAttackingArray.getFirst() instanceof Healer)) {\n                    //calculate the damage value of opponnet army attacking  value\n                    double dmg = 0.5 * (opponentArmyAttackingArray.get(i).getAttack()) - 0.1 * (challengerArmyDefendingArray.get(0).getDefence());\n                    //reduce health of challenger army difending  character according to the dmg value\n                    challengerArmyDefendingArray.get(0).setHealth(challengerArmyDefendingArray.get(0).getHealth() - dmg);\n\n                    System.out.println(opponentArmyDefendingArray.get(0).getName()+\"'s health reduce by\"+dmg+\"by the attck of\"+challengerArmyAttackingArray.get(0).getName());\n\n                    if(initialChallenger.getHomeGround().equals(\"Hillcrest\") && opponentArmyAttackingArray.get(0).getCharacterType().equals(\"Highlander\")){\n                        //get the damge value of challenger army attacking array\n                        double bonusdmg = 0.5 * (opponentArmyAttackingArray.get(i).getAttack()*0.2) - 0.1 * (challengerArmyDefendingArray.get(0).getDefence());\n                        //reduce the health of defending array army charactrer according to the damage value\n                        opponentArmyDefendingArray.get(0).setHealth(opponentArmyDefendingArray.get(0).getHealth() - bonusdmg);\n                    }\n                    if(turn != 1){\n                        if(initialChallenger.getHomeGround().equals(\"Arcane\") && challengerArmyDefendingArray.get(0).getCharacterType().equals(\"Mystics\")){\n                            challengerArmyDefendingArray.get(0).setHealth(previousHealth*1.1);\n                        }\n                    }\n                    //check whther challener army difending charactor is die or not\n                    if(challengerArmyDefendingArray.get(0).getHealth() <= 0){\n                        System.out.println(challengerArmyDefendingArray.get(0).getName()+\" Died!\");\n                        // get the name of died charactor\n                        String diedCharacter = challengerArmyDefendingArray.get(0).getName();\n                        //remove the died charactor from challengerarmy diffending array\n                        challengerArmyDefendingArray.remove(0);\n\n                        for (Character character: challengerArmyHealingArray){\n                            if (character.getName().equals(diedCharacter)) {\n                                challengerArmyHealingArray.remove(character);\n                                challengerArmyDefendingArray.remove(character);\n                            }\n                        }\n                    }\n                }\n                else{\n                    challengerArmyHealingArray.sort(Comparator.comparingDouble(Character::getHealth));;\n                    double healvalue = 0.1*(challengerArmyAttackingArray.get(0).getAttack());\n                    //update the heal value on charactor healing value\n                    challengerArmyHealingArray.get(0).setHealth(challengerArmyHealingArray.get(0).getHealth()+healvalue);\n                    System.out.println(\"Healer is healed\"+challengerArmyHealingArray.get(0).getHealth()+\"by\"+healvalue);\n                    //save the healed charactor into a varibale\n                    Character healedchar=challengerArmyHealingArray.get(0);\n                    //also update the health value on challengerArmyDiffenderArray the lowest health charactor health\n                    for (Character character : challengerArmyDefendingArray) {\n                        if(character.getName().equals(healedchar.getName())){\n                            character.setHealth(character.getHealth()+healvalue);\n                        }\n                    }\n                }\n                previousHealth = opponentArmyDefendingArray.get(0).getHealth();\n                attackingSide = false;\n                turn++;\n                i++;\n            }\n\n            if (i == 5){\n                i = 0;\n            }\n\n            if(turn == 10){\n                System.out.println(\"WarEnded\");\n                break;\n            }\n        }\n\n        System.out.println(\"------Result----------\");\n        int finalcountchallengerArmy = challengerArmyAttackingArray.size();\n        int finalcountopponentArmy = opponentArmyAttackingArray.size();\n        if(finalcountchallengerArmy>finalcountopponentArmy) {\n            System.out.println(\"winner is = \" + initialChallenger.getName());\n        } else if (finalcountchallengerArmy<finalcountopponentArmy) {\n            System.out.println(\"winner is = \"+initialOpponent.getName());\n        }\n        else{\n            System.out.println(\"War is Draw\");\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/War.java b/War.java
--- a/War.java	(revision 489f466ae518b3eedd4d8f217fe3b3d486ea71bd)
+++ b/War.java	(date 1710365043939)
@@ -112,13 +112,14 @@
 
         for (Character character: challengerArmyHealingArray){
             if (character instanceof Healer) {
-                opponentArmyHealingArray.remove(character);
+
             }
         }
 
         for (Character character: challengerArmyHealingArray){
             if (character instanceof Healer){
                 challengerArmyHealingArray.remove(character);
+                opponentArmyHealingArray.remove(character);
             }
         }
 
Index: InterfaceMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InterfaceMenu.java b/InterfaceMenu.java
new file mode 100644
--- /dev/null	(date 1710363997101)
+++ b/InterfaceMenu.java	(date 1710363997101)
@@ -0,0 +1,2 @@
+public interface InterfaceMenu {
+}
